<?php

namespace Kanopi\SonarQube;

use mikehaertl\wkhtmlto\Pdf;
use Monolog\Level;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use Psr\Log\LoggerInterface;
use Twig\Environment;
use Twig\Loader\FilesystemLoader;

/**
 * Class RunReport.
 *
 * Used as a mechanism and the entry point for running the reports for
 * SonarQube. This will result in creating a PDF via WKHTMLPDF.
 */
class RunReport {

    protected SonarQube $sonarQube;

    protected LoggerInterface $log;

    protected Environment $twig;

    public function __construct(SonarQube $sonarQube)
    {
        $this->sonarQube = $sonarQube;
    }

    protected function getTwig()
    {
        if (!isset($this->twig)) {
            $loader = new FilesystemLoader(__DIR__ . '/../templates');
            $this->twig = new Environment($loader);
        }
        return $this->twig;
    }

    protected function getPdf()
    {
        if (!isset($this->pdf)) {
            $options = [
                'header-line',
                'header-font-size' => 9,
                'header-spacing' => 3,
                'footer-left' => 'Generated by Kanopi Studios',
                'footer-right'=>'[page] of [topage] pages',
                'footer-font-size' => 9,
                'footer-spacing' => 3,
                'footer-line',
                'javascript-delay' => '5000'
            ];
            $this->pdf = new Pdf($options);
        }
        return $this->pdf;
    }

    public function createReport(string|array $projects, string $fileName)
    {
        $this->log->info('Starting to Create Report');
        if (is_string($projects)) {
            $projects = [$projects];
        }

        $data = [];
        foreach ($projects AS $project) {
            $data[$project] = new Project($this->sonarQube, $project);
        }

        $this->log->info('Creating Summary for Project', $projects);
        $summaryOutput = $this->getTwig()->render('summary.html.twig', [
            'summary' => array_map(function(Project $project) {
                return $project->getSummary();
            }, $data),
        ]);

        $this->log->info('Add Summary Page to end of the report');
        $this->getPdf()->addPage($summaryOutput);

        $this->log->info('Looping through the projects');
        foreach ($data as $project) {
            $this->log->info('Starting on the report - ' . $project->getName());
            $options = [
                'header-left' => $project->getName(),
            ];

            $reports = [
                'issues.html.twig' => 'issues',
                'vulnerabilities.html.twig' => 'vulnerabilities',
                'hotspots.html.twig' => 'hotspots',
                'duplications.html.twig' => 'duplications',
            ];

            $this->log->info('Starting on reports');
            $summary = $project->getSummary();
            $items = $project->getItems();
            foreach ($reports AS $index) {
                $this->log->info('Building report ' . $index);
                $report = $this->getTwig()->render($index . '.html.twig', [
                    'title' => '',
                    'items' => $items[$index],
                    'summary' => $summary,
                ]);
                $this->log->info('Adding page to end of the report');
                $this->getPdf()->addPage($report, $options);
            }
        }

        $this->log->info('Attempting to save the file');
        if (!$this->getPdf()->saveAs($fileName)) {
            echo sprintf('ERROR: %s', $this->getPdf()->getError());
            exit(1);
        }
    }

    /**
     * Static command used to run the Report Generation.
     *
     * @param string $sonarQubeHost
     *   The hostname of the sonarqube api.
     * @param string $sonarQubeUser
     *   The username / api token to use for authentication.
     * @param string $sonarQubePass
     *   The password to use for authentication.
     * @param string|array $project
     *   The list of projects to run a report on.
     * @param string $fileName
     *   The name to save the report as.
     * @return void
     */
    public static function run(
        string $sonarQubeHost,
        string $sonarQubeUser,
        string $sonarQubePass,
        string|array $project,
        string $fileName
    ) {
        $sonarQube = new SonarQube($sonarQubeHost, $sonarQubeUser, $sonarQubePass);
        $instance = new RunReport($sonarQube);
        $log = new Logger('sonarqube-report');
        $log->pushHandler(new StreamHandler('php://stdout', Logger::DEBUG));
        $instance->log = $log;
        $instance->createReport($project, $fileName);
    }
}