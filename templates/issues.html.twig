{% extends 'template.html.twig' %}

{% block content %}
<div class="break-after">
    <h2>Code Base Issues</h2>
    <h3 id="overview" class="css-cwjz0i e1hs9atk0">Overview</h3>
    <p>While running an analysis, SonarQube raises an issue every time a piece of code breaks a coding rule. The set of coding rules are defined by the associated&nbsp;<a href="/latest/instance-administration/quality-profiles/">Quality Profile</a>&nbsp;for each language in the project.</p>
    <h3>Issue types</h3>
    <p>There are three types of issues:</p>
    <ol>
        <li><strong>Bug</strong>: A coding mistake that can lead to an error or unexpected behavior at runtime.</li>
        <li><strong>Vulnerability</strong>: A point in your code that's open to attack.</li>
        <li><strong>Code Smell</strong>: A maintainability issue that makes your code confusing and difficult to maintain.</li>
    </ol>
    <h4>Issue severity</h4>
    <p>Each issue has one of five severities:</p>
    <ol>
        <li><strong>BLOCKER</strong>: Bug with a high probability to impact the behavior of the application in production. For example, a memory leak, or an unclosed JDBC connection are BLOCKERs that <em>must be fixed immediately</em>.</li>
        <li><strong>CRITICAL</strong>:&nbsp;Either a bug with a low probability to impact the behavior of the application in production or an issue that represents a security flaw. An empty catch block or SQL injection would be a CRITICAL issue. The code <em>must be reviewed immediately</em>.</li>
        <li><strong>MAJOR</strong>:&nbsp;A quality flaw that can highly impact the developer's productivity. An uncovered piece of code, duplicated blocks, or unused parameters are examples of MAJOR issues.</li>
        <li><strong>MINOR</strong>:&nbsp;A quality flaw that can slightly impact the developer's productivity. For example, lines should not be too long, and "switch" statements should have at least 3 cases, are both be considered MINOR issues.</li>
        <li><strong>INFO</strong>:&nbsp;Neither a bug nor a quality flaw, just a finding.</li>
    </ol>
    <p>Ideally, the team wouldn't introduce any new issues (new technical debt).&nbsp;<a href="https://www.sonarsource.com/products/sonarlint/" class="external-link" target="__blank">SonarLint<svg height="12" stroke-linejoin="round" stroke-miterlimit="1.41421" fill-rule="evenodd" clip-rule="evenodd" version="1.1" viewBox="0 0 16 16" width="12" class="css-1o0rfo8 e9vyosc0"><path fill="currentColor" d="M12 9.25v2.5A2.25 2.25 0 0 1 9.75 14h-6.5A2.25 2.25 0 0 1 1 11.75v-6.5A2.25 2.25 0 0 1 3.25 3h5.5c.14 0 .25.11.25.25v.5c0 .14-.11.25-.25.25h-5.5C2.562 4 2 4.563 2 5.25v6.5c0 .688.563 1.25 1.25 1.25h6.5c.688 0 1.25-.563 1.25-1.25v-2.5c0-.14.11-.25.25-.25h.5c.14 0 .25.11.25.25zm3-6.75v4c0 .273-.227.5-.5.5a.497.497 0 0 1-.352-.148l-1.375-1.375L7.68 10.57a.27.27 0 0 1-.18.078.27.27 0 0 1-.18-.078l-.89-.89a.27.27 0 0 1-.078-.18.27.27 0 0 1 .078-.18l5.093-5.093-1.375-1.375A.497.497 0 0 1 10 2.5c0-.273.227-.5.5-.5h4c.273 0 .5.227.5.5z"></path></svg></a>&nbsp;helps developers by performing local analyses to check code before pushing it back to the SCM. But in real life, it's not always possible to code without any new technical debt, and sometimes it's not worth it.</p>
    <p>So new issues do get introduced.</p>
    <h3>Understanding issue context</h3>
    <p>Sometimes, issues are self-evident once they're pointed out. For instance, if your team has agreed to an init-lower, camelCase variable naming convention, and an issue is raised on&nbsp;<code>My_variable</code>, you don't need a lot of background information to understand the problem. In other situations, <em>context may be essential</em> to understanding why an issue was raised. That's why SonarQube supports not only the primary issue location where the issue message is shown but also secondary issue locations. For instance, secondary issue locations are used to mark the pieces of code in a way that adds Cognitive Complexity to a method.</p>
    <p>However, there are times when a simple laundry list of contributing locations isn't enough to understand an issue. For instance, when a null pointer can be dereferenced on some paths through the code, what you really need are issue flows. Each flow is a&nbsp;<em>set</em>&nbsp;<em>of secondary locations </em>ordered to show the exact path through the code on which a problem can happen. SonarQube supports multiple flows because there can be multiple paths through the code on which a resource is not released.</p>
    <p>Check out this <a href="https://youtu.be/17G-aZcuMKw" class="external-link" target="__blank">video<svg height="12" stroke-linejoin="round" stroke-miterlimit="1.41421" fill-rule="evenodd" clip-rule="evenodd" version="1.1" viewBox="0 0 16 16" width="12" class="css-1o0rfo8 e9vyosc0"><path fill="currentColor" d="M12 9.25v2.5A2.25 2.25 0 0 1 9.75 14h-6.5A2.25 2.25 0 0 1 1 11.75v-6.5A2.25 2.25 0 0 1 3.25 3h5.5c.14 0 .25.11.25.25v.5c0 .14-.11.25-.25.25h-5.5C2.562 4 2 4.563 2 5.25v6.5c0 .688.563 1.25 1.25 1.25h6.5c.688 0 1.25-.563 1.25-1.25v-2.5c0-.14.11-.25.25-.25h.5c.14 0 .25.11.25.25zm3-6.75v4c0 .273-.227.5-.5.5a.497.497 0 0 1-.352-.148l-1.375-1.375L7.68 10.57a.27.27 0 0 1-.18.078.27.27 0 0 1-.18-.078l-.89-.89a.27.27 0 0 1-.078-.18.27.27 0 0 1 .078-.18l5.093-5.093-1.375-1.375A.497.497 0 0 1 10 2.5c0-.273.227-.5.5-.5h4c.273 0 .5.227.5.5z"></path></svg></a>&nbsp;for more information about understanding issues with multiple locations.</p>
    <h3 id="issues-lifecycle" class="css-um5or7 e1hs9atk0">Issues lifecycle</h3>
    <h4>Statuses</h4>
    <p>After creation, issues flow through a lifecycle, taking one of the following statuses:</p>
    <ul>
        <li><strong>Open</strong>: set by SonarQube on new issues.</li>
        <li><strong>Confirmed</strong>:&nbsp;set manually to indicate that the issue is valid.</li>
        <li><strong>Resolved</strong>:&nbsp;set manually to indicate that the next analysis should Close the issue.</li>
        <li><strong>Reopened</strong>:&nbsp;set automatically by SonarQube when a Resolved issue hasn't actually been corrected.</li>
        <li><strong>Closed</strong>:&nbsp;set automatically by SonarQube for automatically created issues.</li>
    </ul>
    <h4>Resolutions</h4>
    <p>Closed issues will have one of the following resolutions:</p>
    <ul>
        <li><strong>Fixed</strong>:&nbsp;set automatically when a subsequent analysis shows that the issue has been corrected or the file is no longer available (removed from the project, excluded from a project, or renamed).</li>
        <li><strong>Removed</strong>:&nbsp;set automatically when the related rule is no longer available. The rule may not be available either because it has been removed from the Quality Profile or because the underlying plugin has been uninstalled.</li>
    </ul>
    <p>Resolved issues will have one of the following resolutions:</p>
    <ul>
        <li><strong>False Positive</strong>:&nbsp;set manually.</li>
        <li><strong>Won't Fix</strong>:&nbsp;set manually.</li>
    </ul>
    <h4>Issue workflow</h4>
    <p>Issues are automatically closed (Status: Closed) when:</p>
    <ul>
        <li>an issue of any status has been properly fixed = Resolution: Fixed</li>
        <li>an issue no longer exists because the related coding rule has been deactivated or is no longer available (for example, the plugin has been removed) = Resolution: Removed</li>
    </ul>
    <p>Issues are automatically reopened (Status: Reopened) when:</p>
    <ul>
        <li>an issue that was manually Resolved as <em>Fixed</em>, and not a labeled as False positive, is shown by a subsequent analysis to still exist.</li>
    </ul>
    <h3 id="understanding-which-issues-are-new" class="css-um5or7 e1hs9atk0">Understanding which issues are "new"</h3>
    <p>To determine the creation date of an issue, an algorithm is executed during each analysis to determine whether an issue is new or existed previously. This algorithm relies on content hashes (excluding whitespace) for the line the issue is reported on. For multi-line issues, the hash of the first line is used. For each file (after the detection of file renaming), the algorithm takes the base list of issues from the <em>previous analysis</em> and tries to match those issues with the raw issue list reported by the <em>new analysis</em>. The algorithm tries to first match using the strongest evidence and then falls back to weaker heuristics.</p>
    <ul>
        <li>If the issue is on the same rule, with the same line number and with the same line hash (but not necessarily with the same message) : MATCH</li>
        <li>Detect block move inside the file, then if the issue is on the same (moved) line and on the same rule (but not necessarily with the same message) : MATCH</li>
        <li>On the same rule, with the same message and with the same line hash (but not necessarily with the same line) : MATCH</li>
        <li>On the same rule, with the same message and with the same line number (but not necessarily with the same line hash) : MATCH</li>
        <li>On the same rule and with the same line hash (but not the same message and not the same line) : MATCH</li>
        <li>Is there a matching&nbsp;<strong>CLOSED</strong>&nbsp;issue : MATCH and Reopen</li>
    </ul>
    <p>Unmatched "base" issues are closed and considered as <em>Fixed</em>.</p>
    <p>Unmatched "raw" issues are considered <em>new</em>.</p>
    <h3 id="understanding-issue-backdating" class="css-um5or7 e1hs9atk0">Understanding issue backdating</h3>
    <p>Once an issue has been determined to be "new" as described above, the next question is what date to give it. For instance, what if the issue has existed in code for a long time but was only found in the most recent analysis because new rules were added to the profile? Should this issue be given the date of the last change on its line, or the date of the analysis where it was first raised? That is, should it be backdated? If the date of the last change to the line is available (this requires&nbsp;<a href="/latest/analyzing-source-code/scm-integration/">SCM integration</a>) then under these circumstances, the issue will be backdated:</p>
    <ul>
        <li>On the first analysis of a project or branch.</li>
        <li>When the rule is new in the profile (a brand new rule activated or a rule that was deactivated and is now activated).</li>
        <li>When SonarQube has just been upgraded (because rule implementations could be smarter now).</li>
        <li>When the rule is external.</li>
    </ul>
    <p>As a consequence, it is possible that backdating will keep newly raised issues out of <a href="/latest/project-administration/defining-new-code/">New code</a>.</p>
    <h3 id="automatic-issue-assignment" class="css-um5or7 e1hs9atk0">Automatic issue assignment</h3>
    <h4>For bug, vulnerability, and code smells</h4>
    <p>New issues are automatically assigned during analysis to the last committer on the issue line if the committer can be correlated to a SonarQube user. Note that currently, issues on any level above a file, for example, issues reported at a directory or project level, cannot be automatically assigned.</p>
    <h4>User correlation</h4>
    <p>Login and email correlations are made automatically. For example, if the user commits with their email address and that email address is part of their SonarQube profile, then new issues raised on lines where the user was the last committer will be automatically assigned to the user.</p>
    <p>Additional correlations can be made manually in the user's profile. Please see the documentation on <a href="/latest/instance-administration/security/">Security</a> under the <strong>Authorization</strong> header for more details.</p>
    <h4>Known limitation</h4>
    <p>If the SCM login associated with an issue is longer than 255 characters including the characters for an <em>issue author</em>, the author will be left blank.</p>
    <h3 id="issue-edits" class="css-um5or7 e1hs9atk0">Issue edits</h3>
    <p>SonarQube's issues workflow can help you manage your issues. There are seven different things you can do to an issue (other than fixing it in the code!): Comment, Assign, Confirm, Change Severity, Resolve, Won't Fix, and False Positive.</p>
    <p>These actions break out into three different categories.</p>
    <h4>Technical review</h4>
    <p>The Confirm, False Positive, Won't Fix, Severity change, and Resolve actions all fall into this category which presumes an initial review of an issue to verify its validity. Assume that it's time to review the technical debt added in the last review period; this time period could be a day, a week, or an entire sprint. You go through each new issue and assign one of the following:</p>
    <ul>
        <li><strong>Confirm</strong>: By confirming an issue, you basically say "Yep, that's a problem." Doing so moves it out of "Open" status to <em>Confirmed</em>.</li>
        <li><strong>False Positive</strong>:&nbsp;Looking at the issue in context, you realize that for whatever reason, this issue isn't actually a problem. So you mark it as a <em>False Positive</em> and move on. This review assignment requires <strong>Administer Issues</strong><em> </em>permission level on the project.</li>
        <li><strong>Severity change</strong>: This is the middle ground between the first two options. Yes, it's a problem but it's not as bad a problem as the rule's default severity makes it out to be. Or perhaps it's actually a far worse problem. Either way, you adjust the severity of the issue to bring it in line with what you feel it deserves. This review assignment requires <strong>Administer Issues</strong><em> </em>permission level on the project.</li>
        <li><strong>Won't Fix</strong>:&nbsp;Looking at the issue in context, you realize that while it's a valid issue, it's not one that actually needs fixing. In other words, it represents accepted technical debt. So you mark it as <em>Won't Fix</em> and move on. This review assignment requires <strong>Administer Issues </strong>permission level on the project.</li>
        <li><strong>Resolve</strong>: If you think you've fixed an open issue, you can <em>Resolve</em> it. If you're correct, the next analysis will move it to closed status. If you're wrong, it's status will go to re-opened.</li>
    </ul>
    <p>If you tend to mark a lot of issues as <em>False Positive</em> or <em>Won't Fix</em>, it means that some coding rules are not appropriate for your context. You can either completely deactivate issues in the <a href="/latest/instance-administration/quality-profiles/">Quality profile</a> or use issue exclusions to narrow the focus of the rules so they are not used on specific parts (or types of objects) of your application; check out the documentation on defining the <a href="/latest/project-administration/narrowing-the-focus/">analysis scope</a> for more details about inclusions and exclusions. Similarly, making a lot of severity changes should prompt you to consider updating the rule severities in your profiles.</p>
    <p>As you edit issues, the related metrics, for example, new bugs being reported, will update automatically; as will the Quality gate status if it's relevant.</p>
    <div role="alert" class="css-1lhwplw e16b5a5d1"><div class="css-xdc6kw e16b5a5d0"><p><strong>False-Positive and Won't Fix</strong><br>
                You can mark individual issues False Positive or Won't Fix through the issues interface. If you're using PR analysis provided by the Developer Edition, issues marked False Positive or Won't Fix will retain that status after merge. This is the preferred approach.</p>
            <p><strong>//NOSONAR</strong><br>
                For most languages, SonarQube supports the use of the generic mechanism: <code>//NOSONAR</code> at the end of the line of the issue. This will suppress all issues - now and in the future - that might be raised on the line.</p></div></div>
    <h4>Dispositioning</h4>
    <p>Once issues have been through technical review, it's time to decide who's going to deal with them. By default, issues are assigned to the last committer on the issue line (at the time the issue is raised), but you can certainly reassign them to yourself or to someone else. The assignee will receive an email notification of the assignment but only if they signed up for notifications, and the assignment will show up everywhere the issue is displayed, including in the <strong>My Issues</strong> list in the <strong>My Account</strong> space.</p>
    <h4>General</h4>
    <p>At any time during the lifecycle of an issue, you can log a comment on it. Comments are displayed in the issue detail in a running log. You have the ability to edit or delete the comments you made.</p>
    <p>You can also edit an issue's tags. Issues inherit the tags of the rules that created them, but the tag set on an issue is fully editable. Tags can be created, added, and removed at will for users with the <strong>Browse</strong> permission level on the project.</p>
    <p>Although they are initially inherited from the relevant rule, issue tags are not synchronized with the rule therefore, adding tags to a rule <em>will not add those tags to the rule's issues</em>.</p>
    <h4>Bulk change</h4>
    <p>All of these changes and more can be made to multiple issues at once using the <strong>Bulk Change</strong> option in the issues search results pane.</p>
    <h3>Purging closed issues</h3>
    <p>By default, Closed issues are kept for 30 days. For more details, please see&nbsp;<a href="/latest/instance-administration/housekeeping/">Housekeeping</a>.</p>
    <p>More information can be found on the SonarQube docs https://docs.sonarqube.org/latest/user-guide/issues.</p>
</div>

<div class="panel panel-default">
    <div class="panel-heading"><h2 style="margin-bottom: 0; margin-top: 0;">Overview</h2></div>
    <div class="panel-body">
        <div class="row">
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-circle-info"></i> Info<br/>{{ summary.info }}</div>
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-circle-arrow-down"></i> Minor<br/>{{ summary.minor }}</div>
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-circle-chevron-up"></i> Major<br/>{{ summary.major }}</div>
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-circle-arrow-up"></i> Critical<br/>{{ summary.critical }}</div>
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-circle-exclamation"></i> Blocker<br/>{{ summary.blocker }}</div>
        </div>
        <hr />
        <div class="row">
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-circle-radiation"></i> Code Smell<br/>{{ summary.code_smell }}</div>
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-bug"></i> Bug<br/>{{ summary.bugs }}</div>
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-lock-open"></i> Vulnerability<br/>{{ summary.vulnerability }}</div>
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-shield-halved"></i> Hotspot<br/>{{ summary.hotspot }}</div>
            <div class="col-xs-2" style="text-align: center"><i class="fa-solid fa-code"></i> Lines<br/>{{ summary.lines }}</div>
        </div>
    </div>
    <div class="panel-footer"><strong>Last analyzed:</strong> {{ summary.lastrun | date('m/d/Y H:i a', 'America/Los_Angeles') }}</div>
</div>

<div class="panel panel-default">
  <div class="panel-heading"><h2 style="margin-bottom: 0; margin-top: 0;">Issues</h2></div>
  <div class="panel-body">
    {% for component in items %}
      <div style="margin-bottom: 1rem;">
        <table width="100%">
          <thead>
            <tr>
                <th colspan="4" style="font-weight: 700;">
                    <p style="margin-bottom: .75rem;">File: {{ component.longName }}</p>
                </th>
            </tr>
            <tr>
              <th width="10%">Severity</th>
              <th width="15%">Type</th>
              <th>Message</th>
              <th width="10%" style="text-align: right;">Line</th>
            </tr>
          </thead>
          <tbody>
            {% for issue in component.items %}
              <tr>
                <td style="vertical-align: top">
                  {% if issue.severity == "INFO" %}
                    <i class="fa-solid fa-circle-info"></i> Info
                  {% elseif issue.severity == "MINOR" %}
                    <i class="fa-solid fa-circle-arrow-down"></i> Minor
                  {% elseif issue.severity == "MAJOR" %}
                    <i class="fa-solid fa-circle-chevron-up"></i> Major
                  {% elseif issue.severity == "CRITICAL" %}
                    <i class="fa-solid fa-circle-arrow-up"></i> Critical
                  {% elseif issue.severity == "BLOCKER" %}
                    <i class="fa-solid fa-circle-exclamation"></i> Blocker
                  {% else %}
                    {{ issue.severity }}
                  {% endif %}
                </td>
                <td style="vertical-align: top">
                  {% if issue.type == "CODE_SMELL" %}
                    <i class="fa-solid fa-circle-radiation"></i> Code Smell
                  {% elseif issue.type == 'BUG' %}
                    <i class="fa-solid fa-bug"></i> Bug
                  {% elseif issue.type == 'VULNERABILITY' %}
                    <i class="fa-solid fa-lock-keyhole-open"></i> Vulnerability
                  {% elseif issue.type == 'HOTSPOT' %}
                    <i class="fa-solid fa-shield-halved"></i> Hotspot
                  {% else %}
                    {{ issue.type }}
                  {% endif %}
                </td>
                <td style="vertical-align: top">{{ issue.message }}</td>
                <td style="text-align: right; vertical-align: top">{{ issue.line }}</td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      </div>
      <hr />
    {% endfor %}
  </div>
</div>
{% endblock %}